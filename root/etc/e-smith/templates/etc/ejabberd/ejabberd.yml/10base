loglevel: 4
log_rotate_size: 10485760
log_rotate_date: ""
log_rotate_count: 1
log_rate_limit: 100

hosts:
  - "{{$DomainName}}"

define_macro:
  'CERTFILE': "/etc/ejabberd/ejabberd.pem"
  'TLSOPTS':
    - "no_sslv3"

listen:
  - 
    port: 5222
    ip: "0.0.0.0"
    module: ejabberd_c2s
    certfile: 'CERTFILE'
    protocol_options: 'TLSOPTS'
    starttls_required: true
    max_stanza_size: 65536
    shaper: c2s_shaper
    access: c2s
  - 
    port: 5223
    ip: "0.0.0.0"
    module: ejabberd_c2s
    access: c2s
    shaper: c2s_shaper
    tls: true
    certfile: 'CERTFILE'
    protocol_options: 'TLSOPTS'
    max_stanza_size: 65536
{
if ($ejabberd{'S2S'} eq 'enabled') {
$OUT .= q(
  - 
    port: 5269
    ip: "0.0.0.0"
    module: ejabberd_s2s_in
    max_stanza_size: 131072
    shaper: s2s_shaper
    tls: true
    certfile: 'CERTFILE'
    protocol_options: 'TLSOPTS'
);
}
}
  - 
    port: 5280
    ip: "0.0.0.0"
    module: ejabberd_http
    certfile: 'CERTFILE'
    tls: true
    request_handlers:
      "/websocket": ejabberd_http_ws
      "/api": mod_http_api
      "/bosh": mod_bosh
    web_admin: {((${ejabberd}{WebAdmin} || '') eq 'enabled') ? "true" : "false";}
    http_bind: true
    captcha: false

auth_method: external
extauth_program: "/usr/libexec/nethserver/ejabberd-auth"
extauth_instances: 3

shaper:
  normal: {${ejabberd}{'shaperNormal'} || '500000';}
  fast: {${ejabberd}{'shaperFast'} || '1000000';}

max_fsm_queue: 1000

acl:
  admin:
    user:
{
    foreach my $admin ( @jabberadmins) {
        $admin =~ s/\@/": "/g;
        $OUT .= "      - \"$admin\"\n";
    }
}
  local:
    user_regexp: ""
  loopback:
    ip:
      - "127.0.0.0/8"

shaper_rules:
  max_user_sessions: 10
  c2s_shaper:
    - none: admin
    - normal
  s2s_shaper: fast

access_rules:
  local:
    - allow: local
  c2s:
    - deny: blocked
    - allow
  announce:
    - allow: admin
  configure:
    - allow: admin
  muc_create:
    - allow: local
  pubsub_createnode:
    - allow: local
  register:
    - deny
  trusted_network:
    - allow: loopback

api_permissions:
  "console commands":
    from:
      - ejabberd_ctl
    who: all
    what: "*"
  "admin access":
    who:
      - access:
          - allow:
            - ip: "127.0.0.1/8"
            - acl: admin
      - oauth:
        - scope: "ejabberd:admin"
        - access:
          - allow:
              - ip: "127.0.0.1/8"
              - acl: admin
    what:
      - "*"
      - "!stop"
      - "!start"
  "public commands":
    who:
      - ip: "127.0.0.1/8"
    what:
      - "status"
      - "connected_users_number"

language: "en"

allow_contrib_modules: true

modules:
  mod_adhoc: \{\}
  mod_admin_extra: \{\}
  mod_announce: # recommends mod_adhoc
    access: announce
  mod_blocking: \{\} # requires mod_privacy
  mod_caps: \{\}
  mod_carboncopy: \{\}
  mod_client_state: \{\}
  mod_configure: \{\} # requires mod_adhoc
  mod_disco: \{\}
  mod_bosh: \{\}
  mod_last: \{\}
  mod_mam:
    db_type: mnesia
    use_cache: true
    default: always
  mod_muc:
    access:
      - allow
    access_admin:
      - allow: admin
    access_create: muc_create
    access_persistent: muc_create
  mod_muc_admin: \{\}
  mod_ping: \{\}
  mod_privacy: \{\}
  mod_private: \{\}
  mod_pubsub:
    access_createnode: pubsub_createnode
    ignore_pep_from_offline: true
    last_item_cache: false
    plugins:
      - "flat"
      - "pep" # pep requires mod_caps
  mod_register:
    welcome_message:
      subject: "Welcome!"
      body: |-
        Hi.
        Welcome to {{$DomainName}} XMPP server.
    ip_access: trusted_network
    access: register
  mod_roster: \{\}
  mod_shared_roster: \{\}
  mod_vcard:
    search: false
  mod_version: \{\}
  mod_stream_mgmt: \{\}
  mod_s2s_dialback: \{\}
  mod_http_api: \{\}
